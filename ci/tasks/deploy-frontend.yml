platform: linux
image_resource:
  type: registry-image
  source:
    repository: hashicorp/terraform
    tag: 1.0.4
    username: ((docker-hub-username))
    password: ((docker-hub-password))
params:
  DEPLOYER_ROLE_ARN: ((deployer-role-arn-non-prod))
  STATE_BUCKET: digital-identity-dev-tfstate
  STATE_LOCKING_TABLE: digital-identity-dev-tfstate-locking
  DEPLOY_ENVIRONMENT: build
  GTM_ID: ((build-gtm-id))
  SESSION_EXPIRY: ((build-session-expiry))
  BASIC_AUTH_USERNAME: ((no-basic-auth-username))
  BASIC_AUTH_PASSWORD: ((no-basic-auth-password))
  INCOMING_TRAFFIC_CIDR_BLOCKS: '["0.0.0.0/0"]'
  BASIC_AUTH_BYPASS_CIDR_BLOCKS: '[]'
  SUPPORT_LANGUAGE_CY: "0"
inputs:
  - name: frontend-src
  - name: frontend-image
  - name: basic-auth-sidecar-image
outputs:
  - name: terraform-outputs
run:
  path: /bin/sh
  args:
    - -euc
    - |
      export IMAGE_URI=$(cat frontend-image/repository)
      export IMAGE_TAG=$(cat frontend-image/tag)
      export IMAGE_DIGEST=$(cat frontend-image/digest)

      export SIDECAR_IMAGE_URI=$(cat basic-auth-sidecar-image/repository)
      export SIDECAR_IMAGE_TAG=$(cat basic-auth-sidecar-image/tag)
      export SIDECAR_IMAGE_DIGEST=$(cat basic-auth-sidecar-image/digest)

      NORMALISED_BASIC_AUTH_USERNAME="${BASIC_AUTH_USERNAME}"
      NORMALISED_BASIC_AUTH_PASSWORD="${BASIC_AUTH_PASSWORD}"

      if [ ${NORMALISED_BASIC_AUTH_PASSWORD} == "none" ]; then
        NORMALISED_BASIC_AUTH_USERNAME=""
        NORMALISED_BASIC_AUTH_PASSWORD=""
      fi

      if [[ "${DEPLOY_ENVIRONMENT}" == "build" ]]; then
        ENABLE_STATE_LOCKING=true
      else
        ENABLE_STATE_LOCKING=false
      fi

      cd "frontend-src/ci/terraform/"
      terraform init -input=false \
        -backend-config "role_arn=${DEPLOYER_ROLE_ARN}" \
        -backend-config "bucket=${STATE_BUCKET}" \
        -backend-config "key=frontend-${DEPLOY_ENVIRONMENT}-terraform.tfstate" \
        -backend-config "encrypt=true" \
        -backend-config "region=eu-west-2" \
        -backend-config "dynamodb_table=${STATE_LOCKING_TABLE}"

      terraform apply -auto-approve \
        -var "deployer_role_arn=${DEPLOYER_ROLE_ARN}" \
        -var "common_state_bucket=${STATE_BUCKET}" \
        -var "session_expiry=${SESSION_EXPIRY}" \
        -var "gtm_id=${GTM_ID}" \
        -var "session_expiry=${SESSION_EXPIRY}" \
        -var "image_uri=${IMAGE_URI}" \
        -var "image_tag=${IMAGE_TAG}" \
        -var "image_digest=${IMAGE_DIGEST}" \
        -var "sidecar_image_uri=${SIDECAR_IMAGE_URI}" \
        -var "sidecar_image_tag=${SIDECAR_IMAGE_TAG}" \
        -var "sidecar_image_digest=${SIDECAR_IMAGE_DIGEST}" \
        -var "support_language_cy=${SUPPORT_LANGUAGE_CY}" \
        -var "basic_auth_username=${NORMALISED_BASIC_AUTH_USERNAME}" \
        -var "basic_auth_password=${NORMALISED_BASIC_AUTH_PASSWORD}" \
        -var "incoming_traffic_cidr_blocks=${INCOMING_TRAFFIC_CIDR_BLOCKS}" \
        -var "basic_auth_bypass_cidr_blocks=${BASIC_AUTH_BYPASS_CIDR_BLOCKS}" \
        -var-file ${DEPLOY_ENVIRONMENT}.tfvars \
        -lock="${ENABLE_STATE_LOCKING}"

      terraform output --json > ../../../terraform-outputs/${DEPLOY_ENVIRONMENT}-terraform-outputs.json
