name: Build and deploy frontend Dev
env:
  AWS_REGION: eu-west-2
  DEPLOYER_ROLE: arn:aws:iam::706615647326:role/deployers/dev-github-actions-publish-to-s3-for-code-signing
  DEV_GHA_DEPLOYER_ROLE: arn:aws:iam::653994557586:role/dev-auth-deploy-pipeline-GitHubActionsRole-QrtGginNnjDD
  DEV_TOOLING_ECR_FRONTEND_REPO: frontend-image-repository
  DEV_BASIC_SIDECAR_ECR_REPO: basic-auth-sidecar-image-repository
  DEV_ARTIFACT_BUCKET: dev-auth-deploy-pipeline-githubartifactsourcebuck-ssdefc91xjh6
  DEV_SERVICE_DOWN_ECR_REPO: service-down-page-image-repository

on:
  workflow_dispatch:

jobs:
  pr-data:
    name: Get data for merged PR
    permissions:
      contents: read
      pull-requests: read
    uses: ./.github/workflows/call_get_pr_data.yml

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Assume AWS DEPLOYER role in tooling acct
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: ${{ env.DEPLOYER_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      - name: Login to GDS Dev Dynatrace Container Registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: khw46367.live.dynatrace.com
          username: khw46367
          password: ${{ secrets.DYNATRACE_PAAS_TOKEN }}
      - name: Build, tag, and push frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.DEV_TOOLING_ECR_FRONTEND_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Build, tag, and push basic-auth-sidecar
        working-directory: basic-auth-sidecar
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.DEV_BASIC_SIDECAR_ECR_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Build, tag, and push service down page
        working-directory: service-down-page-config
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.DEV_SERVICE_DOWN_ECR_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    needs:
      - build
      - pr-data
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: ${{ env.DEV_GHA_DEPLOYER_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload frontend Terraform files
        working-directory: ci/terraform
        run: |
          echo "::group::Zip up frontend terraform"
          zip -r frontend.zip .
          echo "::endgroup::"

          echo "::group::Upload artifact to S3"
          OBJECT_VERSION="$(aws s3api put-object \
            --bucket ${{ env.DEV_ARTIFACT_BUCKET }} \
            --key frontend.zip \
            --body frontend.zip \
            --metadata '${{ toJson(fromJson(needs.pr-data.outputs.data)) }}' \
            --query VersionId --output text)"
          echo "::endgroup::"
          echo "::notice title=Final artifact uploaded to S3::object: frontend.zip, version: ${OBJECT_VERSION}"
